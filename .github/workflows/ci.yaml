name: CI

on:
  push:
  pull_request:
    types: [ opened, synchronize, reopened ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ANDROID_SDK_TOOLS: "7302050_latest"
      B64_SERVICE_ACCOUNT: ${{ secrets.B64_SERVICE_ACCOUNT }}
      B64_KS_PROP: ${{ secrets.B64_KS_PROP }}
      B64_KS: ${{ secrets.B64_KS }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Required for sonar scan

      - name: Setup Android SDK
        run: |
          # Extract the SDK version from build.gradle file
          export ANDROID_COMPILE_SDK=`egrep '^[[:blank:]]+compileSdkVersion'  app/build.gradle | awk '{print $2}'`
          # Extract the Build Tools version from build.gradle file
          export ANDROID_BUILD_TOOLS=`egrep '^[[:blank:]]+buildToolsVersion' app/build.gradle | awk '{print $2}' | sed s/\'//g`
          # Extract version info
          export VERSION_NAME=`egrep '^[[:blank:]]+versionName[[:blank:]]'  app/build.gradle | awk '{print $2}' | sed s/\"//g`
          export VERSION_CODE=`egrep '^[[:blank:]]+versionCode[[:blank:]]'  app/build.gradle | awk '{print $2}'`
          # Explicit output for logging purpose only
          echo "ANDROID_SDK_TOOLS: $ANDROID_SDK_TOOLS"
          echo "ANDROID_BUILD_TOOLS: $ANDROID_BUILD_TOOLS"
          echo "ANDROID_COMPILE_SDK: $ANDROID_COMPILE_SDK"
          echo "VERSION_NAME: $VERSION_NAME"
          echo "VERSION_CODE: $VERSION_CODE"
          # Create a info file
          touch ./info.txt
          echo "Build Date          $(date)"                >> ./info.txt
          echo "App Version Name    ${VERSION_NAME}"        >> ./info.txt
          echo "App Version Code    ${VERSION_CODE}"        >> ./info.txt
          echo "Git Branch/Tag      ${GITHUB_REF}"          >> ./info.txt
          echo "Git Commit          ${GITHUB_SHA}"          >> ./info.txt
          # Download and extract SDK tools
          wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}.zip
          unzip -d android-sdk-linux android-sdk.zip >/dev/null
          # Set up environment
          echo y | android-sdk-linux/cmdline-tools/bin/sdkmanager --sdk_root=. "platforms;android-${ANDROID_COMPILE_SDK}" >/dev/null
          echo y | android-sdk-linux/cmdline-tools/bin/sdkmanager --sdk_root=. "platform-tools" >/dev/null
          echo y | android-sdk-linux/cmdline-tools/bin/sdkmanager --sdk_root=. "build-tools;${ANDROID_BUILD_TOOLS}" >/dev/null
          export ANDROID_SDK_ROOT=$PWD
          export PATH=$PATH:$PWD/platform-tools/
          chmod +x ./gradlew
          # Temporarily disable checking for EPIPE error and use yes to accept all licenses
          set +o pipefail
          yes 2>/dev/null | android-sdk-linux/cmdline-tools/bin/sdkmanager --sdk_root=. --licenses >/dev/null
          set -o pipefail

      - name: Cache SonarCloud Packages
        uses: actions/cache@v2
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle Packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Build with Gradle
        run: ./gradlew build # Implicitly runs lint task

      - name: Run Sonar Analysis
        run: ./gradlew sonarqube
        # Do not run for PR raised with forked repos
        # Since github do not pass secrets to PR workflows created with forked repos for security reasons
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Upload Artifacts/Reports # Available in actions tab on github
        uses: actions/upload-artifact@v2
        with:
          name: artifacts-and-reports
          path: |
            app/build/outputs/apk/debug
            app/build/reports
            app/build/test-results
            info.txt

      - name: Publish to Play Store
        if: contains('refs/tags/v', github.ref) # Run on version tags only
        run: |
          if [[ $GITHUB_REF =~ ^refs/tags/v ]]; then
            # Generate the secret files required for building & publishing app on Google Play
            echo "Creating secret files required for signing the app."
            echo $B64_SERVICE_ACCOUNT | base64 -di > ./app/google-services.json
            echo $B64_KS_PROP | base64 -di > ./app/keystore.properties
            echo $B64_KS | base64 -di > ./app/mobile-app-dev.keystore
          fi

          ./gradlew publishRelease # Uploads APK or App Bundle and all Play Store metadata for variant 'release'

          # Remove the secret files immediately after being used since they are not required further.
          # Since actions could transfer files to remote host, so its better to remove after use.

          rm -rf ./app/google-services.json ./app/keystore.properties ./app/mobile-app-dev.keystore

          echo "Successfully published the app!"
